AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: chat-app-using-aws

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 5
    Architectures:
      - x86_64

Resources:
  WebsocketTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebSocketTableByRohith
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: modules/connect.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsocketTable
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - modules/connect.ts
        Minify: true
        Target: es2020
        External:
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: modules/disconnect.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsocketTable
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - modules/disconnect.ts
        Minify: true
        Target: es2020
        External:
          - '@aws-sdk/client-dynamodb'

  JoinRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: modules/joinRoom.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsocketTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub
                - arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/Prod/POST/@connections/*
                - Region: !Ref AWS::Region
                  AccountId: !Ref AWS::AccountId
                  ApiId: !Ref WebSocketApi
      Environment:
        Variables:
          TABLE_NAME: !Ref WebsocketTable
          WEBSOCKET_ENDPOINT: !Sub https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - modules/joinRoom.ts
        Minify: true
        Target: es2020
        External:
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/lib-dynamodb'
          - '@aws-sdk/client-apigatewaymanagementapi'

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: modules/sendMessage.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebsocketTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub
                - arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/Prod/POST/@connections/*
                - Region: !Ref AWS::Region
                  AccountId: !Ref AWS::AccountId
                  ApiId: !Ref WebSocketApi
      Environment:  
        Variables:
          TABLE_NAME: !Ref WebsocketTable
          WEBSOCKET_ENDPOINT: !Sub https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - modules/sendMessage.ts
        Minify: true
        Target: es2020
        External:
          - '@aws-sdk/client-dynamodb'
          - '@aws-sdk/client-apigatewaymanagementapi'

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatAppWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub integrations/${ConnectIntegration}

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub integrations/${DisconnectIntegration}

  JoinRoomPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JoinRoomFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/joinRoom

  JoinRoomIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JoinRoomFunction.Arn}/invocations

  JoinRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: joinRoom
      AuthorizationType: NONE
      Target: !Sub integrations/${JoinRoomIntegration}

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/sendMessage

  SendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendMessage
      AuthorizationType: NONE
      Target: !Sub integrations/${SendMessageIntegration}

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - JoinRoomRoute
      - SendMessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: Prod
      AutoDeploy: true

Outputs:
  WebSocketURL:
    Description: WebSocket API endpoint
    Value: !Sub "${WebSocketApi.ApiEndpoint}/Prod"
